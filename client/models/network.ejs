<h1>Network Diffusion</h1>

<div id="container"></div>
<div id="chart"></div>
<script>
  utils.seed(1);
  /* ----- PARAMETERS ----- */
  const POPULATION = 60;
  const REWIRING_PROBABILITY = 0.2;
  const TRANSFER = 0.02;

  /* ----- SETUP ----- */
  const environment = new Environment();
  const network = new Network();
  environment.use(network);

  const renderer = new CanvasRenderer(environment, {
    autoPosition: true,
    width: 400,
    height: 400
  });
  renderer.mount("#container");
  const chart = new LineChartRenderer(environment, {
    background: "#eee",
    width: 300,
    height: 300,
    range: { min: -0.25, max: 13 }
  });
  chart.mount("#chart");

  function tick(agent) {
    const neighbors = network.neighbors(agent);
    neighbors.forEach(neighbor => {
      if (neighbor.get("size") + TRANSFER < agent.get("size")) {
        agent.decrement("size", TRANSFER);
        neighbor.increment("size", TRANSFER);
      }
    });
  }

  function setup() {
    for (let i = 0; i < POPULATION; i++) {
      const agent = new Agent({
        size: Math.max(utils.gaussian(7, 6), 1)
      });
      agent.addRule(tick);
      environment.addAgent(agent);
      network.addAgent(agent);
    }

    for (let i = 0; i < POPULATION; i++) {
      for (let j = i - 2; j < i + 2; j++) {
        const clampedJ =
          j < 0 ? j + POPULATION : j >= POPULATION ? j - POPULATION : j;
        network.connect(network.get(i), network.get(j));
      }
    }

    network.agents.forEach((agent, i) => {
      network.neighbors(agent).forEach(neighbor => {
        if (utils.uniform() < REWIRING_PROBABILITY) {
          network.disconnect(agent, neighbor);

          const j = utils.random(0, POPULATION);
          network.connect(agent, network.get(j));
        }
      });
    });

    chart.metric("size", {
      fn: utils.stdDev
    });

    chart.metric("size", {
      color: "blue",
      fn: utils.max
    });

    chart.metric("size", {
      color: "red",
      fn: utils.min
    });
  }

  function draw() {
    environment.tick();
    requestAnimationFrame(draw);
  }

  setup();
  draw();
</script>
